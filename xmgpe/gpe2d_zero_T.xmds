<simulation xmds-version="2">
  <name>gpe2d_zero_T</name>

  <author>CM</author>

  <description>
        Immaginary time of a 3d GPE in a spherical trap
    </description>

  <features>
    <auto_vectorise/>
    <benchmark/>
    <bing/>
    <fftw plan="exhaustive"/>
    <!-- <fftw plan="measure"/> -->
    <!-- <chunked_output size="10kB"/> -->
    <openmp threads="12"/>
    <!-- <driver name="distributed-mpi" /> -->
    <!-- <validation kind="run-time"/> -->
    <globals><![CDATA[
	const real dt = 0.001;
	const real Uint = 0.0150648;
	const real AR = 10.0494;
	const real Nparticles = 3.500000e+06;
	const real mu0 = 0.5*pow(15*Nparticles*Uint/4/M_PI/AR, 2.0/5.0);
	]]></globals>
    <!-- <arguments>
      <argument name="Nparticles" type="real" default_value="1e6"/>
    </arguments> -->

  </features>

  <geometry>
    <propagation_dimension>t</propagation_dimension>
    <transverse_dimensions>
      <dimension name="z" lattice="512" domain="(0, 28.000)" transform="bessel" volume_prefactor="2*M_PI"/>
      <dimension name="x" lattice="1024" domain="(0, 280.000)" transform="dct" volume_prefactor="2.0"/>
    </transverse_dimensions>

  </geometry>

  <vector name="potential" dimensions="x z" type="real">
    <components>
            V1</components>
    <initialisation><![CDATA[
        V1 = 0.5*x*x/AR/AR + 0.5*z*z;
      ]]></initialisation>

  </vector>

  <vector name="wavefunction" dimensions="x z" type="real">
    <components>
            psi
        </components>
    <!-- <initialisation kind="hdf5">
      <filename>
                psi_init.h5
            </filename>
    </initialisation> -->
    <initialisation>
      <dependencies>potential</dependencies><![CDATA[
        psi = (mu0 - V1)/Uint;
        if (psi >= 0) psi = sqrt(psi); else psi = 0.0;
        ]]></initialisation>

  </vector>

  <vector name="wavefunction_old" dimensions="x z" type="real">
    <components>
            psi_old
        </components>
    <initialisation>
      <dependencies>
                wavefunction
            </dependencies><![CDATA[
        psi_old = psi;
        ]]></initialisation>

  </vector>

  <vector name="chempot" dimensions="" type="real">
    <components>
            mu
        </components>
    <!-- <initialisation kind="zero"/> -->
    <initialisation>
    <![CDATA[
    mu = mu0;
    ]]></initialisation>

  </vector>

  <computed_vector name="normalization" dimensions="" type="real">
    <components>
            Ncalc
        </components>
    <evaluation>
      <dependencies>wavefunction</dependencies><![CDATA[
        // Calculate the current normalization of the wave function.
        Ncalc = mod2(psi);
      ]]></evaluation>

  </computed_vector>

  <computed_vector name="normalization_old" dimensions="" type="real">
    <components>
            Ncalc_old
        </components>
    <evaluation>
      <dependencies>wavefunction_old</dependencies><![CDATA[
        Ncalc_old = mod2(psi_old);
      ]]></evaluation>

  </computed_vector>

  <computed_vector name="cross_product" dimensions="" type="real">
    <components>
            Nprod
        </components>
    <evaluation>
      <dependencies>wavefunction wavefunction_old</dependencies><![CDATA[
        Nprod = psi_old*psi;
      ]]></evaluation>

  </computed_vector>

  <computed_vector name="kin_energy" dimensions="" type="real">
    <components>
            Kcalc
        </components>
    <evaluation>
      <dependencies basis="kx kz">wavefunction</dependencies><![CDATA[
        Kcalc = 0.5*(kx*kx + kz*kz)*mod2(psi);
      ]]></evaluation>

  </computed_vector>

  <computed_vector name="pot_energy" dimensions="" type="real">
    <components>
            Vcalc
        </components>
    <evaluation>
      <dependencies basis="x z">wavefunction potential</dependencies><![CDATA[
      Vcalc = (V1 + 0.5*Uint*mod2(psi))*mod2(psi);
      ]]></evaluation>

  </computed_vector>

  <sequence>
    <filter><![CDATA[
          printf("Compute gs in imaginary time\n");
        ]]></filter>
    <!-- This normalizes the wf BEFORE the computation -->
    <filter>
      <dependencies>normalization wavefunction</dependencies><![CDATA[
        psi *= sqrt(Nparticles/Ncalc);
      ]]></filter>
    <integrate algorithm="RK4" interval="2.2" steps="2200" tolerance="1e-8">
      <samples>220 220</samples>
      <filters where="step end">
        <filter>
          <dependencies>cross_product normalization_old chempot</dependencies><![CDATA[
              mu = (1 - Nprod / Ncalc_old) / dt;
              ]]></filter>
        <filter>
          <dependencies>wavefunction normalization</dependencies><![CDATA[
            // Correct normalization of the wavefunction
            psi *= sqrt(Nparticles/Ncalc);
          ]]></filter>
        <filter>
          <dependencies>wavefunction wavefunction_old</dependencies><![CDATA[
              psi_old = psi;
              ]]></filter>
      </filters>
      <operators>
        <operator kind="ip">
          <operator_names>Tx</operator_names><![CDATA[
            Tx = -0.5*kx*kx;
          ]]></operator>
        <operator kind="ip">
          <operator_names>Tz</operator_names><![CDATA[
              Tz = -0.5*kz*kz;
            ]]></operator>
        <integration_vectors>wavefunction</integration_vectors>
        <dependencies>potential</dependencies><![CDATA[
          dpsi_dt = Tx[psi] + Tz[psi] - (V1 + Uint*mod2(psi))*psi;
        ]]></operators>
    </integrate>
    <breakpoint filename="gpe.output.final" format="hdf5">
      <dependencies basis="x z">wavefunction</dependencies>
    </breakpoint>

  </sequence>

  <output filename="gpe2d_T0_results_3.5M_AR_10.0">
    <sampling_group basis="x z" initial_sample="yes">
      <moments>psiR</moments>
      <dependencies>wavefunction</dependencies><![CDATA[
        psiR = psi;
        ]]></sampling_group>
    <sampling_group initial_sample="yes">
      <moments>muR norm energy</moments>
      <dependencies>chempot normalization kin_energy pot_energy</dependencies><![CDATA[
          muR = mu;
          norm = Ncalc;
          energy = Kcalc + Vcalc;
        ]]></sampling_group>

  </output>

</simulation>
